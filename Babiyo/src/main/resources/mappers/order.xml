<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mealmaker.babiyo.order">

<resultMap type="orderDto" id="orderResultMap">
<id column="NO" property="no"/>
<result column="MEMBER_ID" property="memberId"/>
<result column="ORDER_DATE" property="orderDate" javaType="java.util.Date"/>
<result column="TOTAL_AMOUNT" property="totalAmount"/>
<result column="PREVIEW" property="preview"/>
<result column="PRODUCT_QUANTITY" property="productQuantity"/>
<result column="RECEIVER_NAME" property="receiverName"/>
<result column="RECEIVER_PHONE" property="receiverPhone"/>
<result column="POST" property="post"/>
<result column="ADDRESS" property="address"/>
<result column="ADDRESS_DETAIL" property="addressDetail"/>
<result column="REQUEST" property="request"/>
<result column="STATE_CODE" property="stateCode"/>
<result column="STATE_NAME" property="stateName"/>
</resultMap>


<resultMap type="orderDetailDto" id="orderDetailResultMap">
<id column="NO" property="no"/>
<result column="ORDER_NO" property="orderNo"/>
<result column="ORDER_DATE" property="orderDate" javaType="java.util.Date"/>
<result column="MEMBER_ID" property="memberId"/>
<result column="PRODUCT_NO" property="productNo"/>
<result column="PRODUCT_NAME" property="productName"/>
<result column="QUANTITY" property="quantity"/>
<result column="PRICE" property="price"/>
</resultMap>


<select id="lastOrder" resultMap="orderResultMap" parameterType="String">
SELECT *
FROM (SELECT O.NO, O.RECEIVER_NAME, O.ADDRESS, O.ADDRESS_DETAIL, O.REQUEST, T.TOTAL_AMOUNT
		FROM MEMBER_ORDER O JOIN 
	    (SELECT ORDER_NO, SUM(QUANTITY * PRICE) TOTAL_AMOUNT
	    FROM ORDER_DETAIL
	    GROUP BY ORDER_NO) T
	    ON O.NO = T.ORDER_NO
		WHERE MEMBER_ID = #{memberId}
		ORDER BY ORDER_DATE DESC) 
WHERE <![CDATA[ ROWNUM <= 1 ]]>
</select>

<select id="orderView" resultMap="orderResultMap" parameterType="int">
SELECT O.NO, O.ORDER_DATE, O.RECEIVER_NAME, O.RECEIVER_PHONE, O.POST, O.ADDRESS, O.ADDRESS_DETAIL
	, O.REQUEST, T.TOTAL_AMOUNT, S.NAME STATE_NAME
FROM MEMBER_ORDER O JOIN ORDER_STATE S
ON O.STATE_CODE = S.CODE
JOIN
(SELECT ORDER_NO, SUM(QUANTITY * PRICE) TOTAL_AMOUNT
    FROM ORDER_DETAIL
    GROUP BY ORDER_NO) T
ON O.NO = T.ORDER_NO
WHERE NO = ${value}
</select>

<select id="orderDetailView" resultMap="orderDetailResultMap" parameterType="int">
SELECT D.PRODUCT_NO, P.NAME PRODUCT_NAME, D.QUANTITY, D.PRICE
FROM ORDER_DETAIL D JOIN PRODUCT P
ON D.PRODUCT_NO = P.NO
WHERE ORDER_NO = ${value}
</select>

<insert id="order" parameterType="orderDto"
useGeneratedKeys="true" keyProperty="no">
<selectKey keyProperty="no" resultType="int" order="AFTER">
	SELECT SEQ_MEMBER_ORDER_NO.CURRVAL 
	FROM DUAL
</selectKey>
INSERT INTO MEMBER_ORDER(MEMBER_ID,ORDER_DATE,RECEIVER_NAME
,RECEIVER_PHONE,POST,ADDRESS,ADDRESS_DETAIL,REQUEST,STATE_CODE)
VALUES(#{memberId}, SYSDATE, #{receiverName}, #{receiverPhone}
, #{post}, #{address}, #{addressDetail}, #{request}, 1)
</insert>

<insert id="orderDetail" parameterType="orderDetailDto">
INSERT INTO ORDER_DETAIL(ORDER_NO, PRODUCT_NO, QUANTITY, PRICE)
<foreach collection="orderDetailList" item="detail" separator="UNION ALL">
SELECT #{orderNo}, #{detail.productNo}, #{detail.quantity}, #{detail.price}
FROM DUAL
</foreach>
</insert>

<select id="orderCount" parameterType="map" resultType="int">
SELECT COUNT(*)
FROM MEMBER_ORDER
<where>
<if test="id != null">MEMBER_ID = #{id}</if>
<if test="search != null and search != ''">AND MEMBER_ID = #{search}</if>
<if test="stateCode != 0">AND STATE_CODE = ${stateCode}</if>
<if test="beginDate != null">AND <![CDATA[ORDER_DATE >= #{beginDate} AND ORDER_DATE < #{endDate}+1]]></if>
</where>
</select>

<select id="orderList" parameterType="map" resultMap="orderResultMap">
SELECT *
FROM(SELECT ROWNUM INROW, ORDER_DATE, MEMBER_ID, NO, PREVIEW, PRODUCT_QUANTITY, TOTAL_AMOUNT, STATE_CODE, STATE_NAME
FROM(SELECT ORDER_DATE, MEMBER_ID, O.NO, P.PREVIEW, P.PRODUCT_QUANTITY, T.TOTAL_AMOUNT, STATE_CODE, STATE_NAME
FROM(SELECT O.ORDER_DATE, O.MEMBER_ID, O.NO, S.CODE STATE_CODE, S.NAME STATE_NAME
	FROM MEMBER_ORDER O JOIN ORDER_STATE S
	ON O.STATE_CODE = S.CODE
	<where>
	<if test="id != null">O.MEMBER_ID = #{id}</if>
	<if test="search != null and search != ''">AND O.MEMBER_ID = #{search}</if>
	<if test="stateCode != 0">AND O.STATE_CODE = ${stateCode}</if>
	<if test="beginDate != null">AND <![CDATA[O.ORDER_DATE >= #{beginDate} AND O.ORDER_DATE < #{endDate}+1]]></if>
	</where>
	) O
    LEFT OUTER JOIN 
    (SELECT O.NO, MIN(P.NAME) PREVIEW, COUNT(*) PRODUCT_QUANTITY
    FROM MEMBER_ORDER O JOIN ORDER_DETAIL D
	ON O.NO = D.ORDER_NO
    JOIN PRODUCT P
    ON P.NO = D.PRODUCT_NO
    GROUP BY O.NO) P
    ON O.NO = P.NO
    JOIN 
    (SELECT ORDER_NO, SUM(QUANTITY * PRICE) TOTAL_AMOUNT
    FROM ORDER_DETAIL
    GROUP BY ORDER_NO) T
    ON O.NO = T.ORDER_NO
    ORDER BY ORDER_DATE DESC))
WHERE INROW BETWEEN ${begin} AND ${end}
</select>	

<update id="orderCancel" parameterType="int">
UPDATE MEMBER_ORDER
SET STATE_CODE = 3
WHERE NO = ${value}
</update>

<select id="orderStateList" resultType="map">
SELECT CODE, NAME
FROM ORDER_STATE
</select>

<update id="orderAccept" parameterType="int">
UPDATE MEMBER_ORDER
SET STATE_CODE = 2
WHERE NO = ${value}
</update>

<select id="waitOrderCount" resultType="int">
SELECT COUNT(*)
FROM MEMBER_ORDER
WHERE STATE_CODE = 1
</select>

<select id="orderDetailList" parameterType="com.mealmaker.babiyo.util.SearchOption"
	 resultMap="orderDetailResultMap">
SELECT O.MEMBER_ID, O.ORDER_DATE, P.NAME PRODUCT_NAME, D.QUANTITY, D.PRICE, D.QUANTITY * D.PRICE TOTAL_AMOUNT
FROM PRODUCT P JOIN ORDER_DETAIL D
ON P.NO = D.PRODUCT_NO
JOIN MEMBER_ORDER O
ON D.ORDER_NO = O.NO
WHERE <![CDATA[O.ORDER_DATE >= #{beginDate} AND O.ORDER_DATE < #{endDate}+1]]>
AND STATE_CODE = 2
<if test="search != ''">
<choose>
<when test="searchOption == ''">
	AND (O.MEMBER_ID LIKE '%'||#{search}||'%'
	OR P.NAME LIKE '%'||#{search}||'%')
</when>
<otherwise>
	AND ${searchOption} LIKE '%'||#{search}||'%'
</otherwise>
</choose>
</if>
<choose>
<when test="sort != ''">ORDER BY ${sort}</when>
<otherwise>ORDER BY O.ORDER_DATE DESC</otherwise>
</choose>
</select>

<select id="totalAmountView" parameterType="int" resultType="map">
SELECT TOTAL_AMOUNT, MEMBER_ID
FROM MEMBER_ORDER O JOIN 
    (SELECT ORDER_NO, SUM(QUANTITY * PRICE) TOTAL_AMOUNT
    FROM ORDER_DETAIL
    GROUP BY ORDER_NO) T
    ON O.NO = T.ORDER_NO
WHERE NO = #{value}
</select>

<select id="salesChart" resultType="map">
SELECT WEEK, NVL(TOTAL_AMOUNT, 0) TOTAL_AMOUNT
FROM
(SELECT SUM(TOTAL_AMOUNT) TOTAL_AMOUNT, TO_CHAR(ORDER_DATE,'YYYY-MM-DD') ORDER_DATE
FROM MEMBER_ORDER O JOIN 
    (SELECT ORDER_NO, SUM(QUANTITY * PRICE) TOTAL_AMOUNT
    FROM ORDER_DETAIL
    GROUP BY ORDER_NO) T
    ON O.NO = T.ORDER_NO
WHERE ORDER_DATE >= TRUNC(SYSDATE) - 6
AND STATE_CODE = 2
GROUP BY TO_CHAR(ORDER_DATE,'YYYY-MM-DD')) MEMBER_ORDER
RIGHT OUTER JOIN 
(SELECT LEVEL, CASE WHEN LEVEL=1 THEN TO_CHAR(SYSDATE,'YYYY-MM-DD')
WHEN LEVEL=2 THEN TO_CHAR(SYSDATE-1,'YYYY-MM-DD')
WHEN LEVEL=3 THEN TO_CHAR(SYSDATE-2,'YYYY-MM-DD')
WHEN LEVEL=4 THEN TO_CHAR(SYSDATE-3,'YYYY-MM-DD')
WHEN LEVEL=5 THEN TO_CHAR(SYSDATE-4,'YYYY-MM-DD')
WHEN LEVEL=6 THEN TO_CHAR(SYSDATE-5,'YYYY-MM-DD')
WHEN LEVEL=7 THEN TO_CHAR(SYSDATE-6,'YYYY-MM-DD') END WEEK
FROM DUAL
CONNECT BY<![CDATA[LEVEL <= 7]]>) DUAL
ON ORDER_DATE = WEEK
ORDER BY WEEK ASC
</select>

<select id="productChart" resultType="map">
SELECT NAME, COUNT
FROM ( SELECT P.NAME , SUM(D.QUANTITY) COUNT
FROM ORDER_DETAIL D JOIN MEMBER_ORDER O
ON D.ORDER_NO = O.NO
JOIN PRODUCT P
ON D.PRODUCT_NO = P.NO
WHERE O.ORDER_DATE >= TRUNC(SYSDATE) - 6
AND O.STATE_CODE = 2
GROUP BY D.PRODUCT_NO, P.NAME
HAVING COUNT(*) > 0
ORDER BY COUNT DESC)
WHERE <![CDATA[ROWNUM <= 7]]>
</select>

<select id="memberHomeOrderCount" resultType="int">
SELECT COUNT(*)
FROM MEMBER_ORDER
WHERE MEMBER_ID = #{value}
AND STATE_CODE ^= 3
</select>


</mapper>